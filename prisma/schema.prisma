// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Decimal
  stock           Int
  ProductInvoices InvoiceProduct[]
}

model Service {
  id              Int              @id @default(autoincrement())
  name            String
  duration        Int
  price           Decimal
  Appointment     Appointment[]
  ServiceInvoices InvoiceService[]
}

model Customer {
  id           Int           @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String
  phone        Int
  Appointments Appointment[]
  Bills        Bill[]
}

model Staff {
  id           Int           @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String
  phone        Int
  Appointments Appointment[]
  Bills        Bill[]
}

model Appointment {
  id Int @id @default(autoincrement())

  staffId Int
  staff   Staff @relation(fields: [staffId], references: [id])

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  time     DateTime
  duration Int // Minutes
  status   Status   @default(PENDIND) // Enum not supported in sqlite (handle in api)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Bill {
  id Int @id @default(autoincrement())

  staffId Int
  staff   Staff @relation(fields: [staffId], references: [id])

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  billnumber Int

  createdAt       DateTime         @default(now())
  InvoiceServices InvoiceService[]
  InvoiceProducts InvoiceProduct[]
}

model InvoiceService {
  id Int @id @default(autoincrement())

  billId Int
  bill   Bill @relation(fields: [billId], references: [id])

  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  price Decimal

  duration Int
}

model InvoiceProduct {
  id Int @id @default(autoincrement())

  billId Int
  bill   Bill @relation(fields: [billId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  price Decimal

  quantity Int
}

enum Status {
  PENDIND
  ACCEPTING
  FINISHING
}
